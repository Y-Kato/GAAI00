# Usage Guide

> **Version 0.2.0 – 2025‑06‑05**
> 完全な `.env` ドリブン構成に刷新しました。以下は新フローです。

---

## 1 Prerequisites

* Docker 20.10+ / docker‑compose plugin
* GPU 不要（CPU で動作）
* OpenAI API キー

```bash
# quick check
$ docker compose version
Docker Compose version v2.29.0
```

---

## 2 Clone & Configure

```bash
git clone https://github.com/Y-Kato/GAAI00.git
cd GAAI00

# env template → personal settings
cp .env.example .env
vi .env  # ← PROJECT_PATH, OPENAI_API_KEY など編集
```

* **すべての環境変数は `.env` で宣言し `config.py` から参照**
  ハードコーディングは禁止です。

---

## 3 Build & Run

```bash
# 初回のみ: --build 付きで
$ docker compose up --build

# 2 回目以降（依存が変わらなければ）
$ docker compose up
```

| UI        | URL                                                                        | ポート変数            |
| --------- | -------------------------------------------------------------------------- | ---------------- |
| Streamlit | [http://localhost:\${PORT\_STREAMLIT}](http://localhost:${PORT_STREAMLIT}) | `PORT_STREAMLIT` |
| Gradio    | [http://localhost:\${PORT\_GRADIO}](http://localhost:${PORT_GRADIO})       | `PORT_GRADIO`    |

> UI は `.env` の `UI_MODE=streamlit` / `gradio` で切替え。

---

## 4 Incremental Indexing

* **初回** : `PROJECT_PATH` 直下をフルスキャンし Chroma に格納。
* **監視** : `watcher.py` が inotify で変更を検出し、差分を再インデックス。
* **手動再構築** :

```bash
docker compose exec app python app/indexer.py --rebuild
```

---

## 5 Environment Matrix (CI)

CI では `.env.ci` を使用し、ポートは `90xx` 台にリマップしています。
カスタムパスを使う場合は `.github/workflows/main.yml`→`env_file` を合わせて変更してください。

---

## 6 Troubleshooting

| 症状                                                   | 原因 / 対策                                     |
| ---------------------------------------------------- | ------------------------------------------- |
| `ModuleNotFoundError: llama_index.embeddings.openai` | 依存が変わったので `docker compose build` 再実行        |
| UI が `404`                                           | `UI_MODE` と URL が一致しているか確認                  |
| インデックスが更新されない                                        | `watcher.py` がクラッシュしていないか `docker logs` で確認 |
